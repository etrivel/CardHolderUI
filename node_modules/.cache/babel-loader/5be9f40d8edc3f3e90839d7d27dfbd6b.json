{"ast":null,"code":"// import { WebSocketLink } from 'apollo-link-ws'\n// import { getMainDefinition } from 'apollo-utilities';\n// import { HttpLink,InMemoryCache,ApolloClient,split,ApolloLink } from 'apollo-boost';\n// import { localStorageKeys } from '../utils'\n// import config from '../config'\n// const httpLink = new HttpLink({ uri: config.graphql })\n// const middlewareLink = new ApolloLink((operation, forward) => {\n//   // get the authentication token from local storage if it exists\n//   const tokenValue = localStorage.getItem(localStorageKeys.auth_token)\n//   // return the headers to the context so httpLink can read them\n//   operation.setContext({\n//     headers: {\n//       Authorization: tokenValue ? `Bearer ${tokenValue}` : '',\n//     },\n//   })\n//   return forward(operation)\n// })\n// // authenticated httplink\n// const httpLinkAuth = middlewareLink.concat(httpLink)\n// const wsLink = new WebSocketLink({\n//   uri: config.socket,\n//   options: {\n//     reconnect: true,\n//     connectionParams: {\n//       Authorization: `Bearer ${localStorage.getItem(localStorageKeys.auth_token)}`,\n//     },\n//   },\n// })\n// const link = split(\n//   // split based on operation type\n//   ({ query }) => {\n//     const { kind, operation } = getMainDefinition(query)\n//     return kind === 'OperationDefinition' && operation === 'subscription'\n//   },\n//   wsLink,\n//   httpLinkAuth,\n// )\n// // apollo client setup\n// const ApolloGQLClient = new ApolloClient({\n//   link: ApolloLink.from([link]),\n//   cache: new InMemoryCache(),\n//   connectToDevTools: true,\n// })\n// export default ApolloGQLClient;\nimport { ApolloClient, InMemoryCache } from '@apollo/client';\nimport config from '../config';\nconst ApolloGQLClient = new ApolloClient({\n  uri: config.graphql,\n  cache: new InMemoryCache()\n});\nexport default ApolloGQLClient;","map":{"version":3,"sources":["C:/Office Work/FIS/CardHolderUI/src/graphql/index.js"],"names":["ApolloClient","InMemoryCache","config","ApolloGQLClient","uri","graphql","cache"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA,SAASA,YAAT,EAAuBC,aAAvB,QAA4C,gBAA5C;AACA,OAAOC,MAAP,MAAmB,WAAnB;AACA,MAAMC,eAAe,GAAG,IAAIH,YAAJ,CAAiB;AACvCI,EAAAA,GAAG,EAAEF,MAAM,CAACG,OAD2B;AAEvCC,EAAAA,KAAK,EAAE,IAAIL,aAAJ;AAFgC,CAAjB,CAAxB;AAIA,eAAeE,eAAf","sourcesContent":["// import { WebSocketLink } from 'apollo-link-ws'\r\n// import { getMainDefinition } from 'apollo-utilities';\r\n// import { HttpLink,InMemoryCache,ApolloClient,split,ApolloLink } from 'apollo-boost';\r\n// import { localStorageKeys } from '../utils'\r\n// import config from '../config'\r\n\r\n// const httpLink = new HttpLink({ uri: config.graphql })\r\n\r\n// const middlewareLink = new ApolloLink((operation, forward) => {\r\n//   // get the authentication token from local storage if it exists\r\n//   const tokenValue = localStorage.getItem(localStorageKeys.auth_token)\r\n//   // return the headers to the context so httpLink can read them\r\n//   operation.setContext({\r\n//     headers: {\r\n//       Authorization: tokenValue ? `Bearer ${tokenValue}` : '',\r\n//     },\r\n//   })\r\n//   return forward(operation)\r\n// })\r\n\r\n// // authenticated httplink\r\n// const httpLinkAuth = middlewareLink.concat(httpLink)\r\n\r\n// const wsLink = new WebSocketLink({\r\n//   uri: config.socket,\r\n//   options: {\r\n//     reconnect: true,\r\n//     connectionParams: {\r\n//       Authorization: `Bearer ${localStorage.getItem(localStorageKeys.auth_token)}`,\r\n//     },\r\n//   },\r\n// })\r\n\r\n// const link = split(\r\n//   // split based on operation type\r\n//   ({ query }) => {\r\n//     const { kind, operation } = getMainDefinition(query)\r\n//     return kind === 'OperationDefinition' && operation === 'subscription'\r\n//   },\r\n//   wsLink,\r\n//   httpLinkAuth,\r\n// )\r\n\r\n// // apollo client setup\r\n// const ApolloGQLClient = new ApolloClient({\r\n//   link: ApolloLink.from([link]),\r\n//   cache: new InMemoryCache(),\r\n//   connectToDevTools: true,\r\n// })\r\n\r\n// export default ApolloGQLClient;\r\n\r\n\r\nimport { ApolloClient, InMemoryCache } from '@apollo/client';\r\nimport config from '../config';\r\nconst ApolloGQLClient = new ApolloClient({\r\n  uri: config.graphql,\r\n  cache: new InMemoryCache()\r\n});\r\nexport default ApolloGQLClient;"]},"metadata":{},"sourceType":"module"}