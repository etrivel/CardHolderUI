{"ast":null,"code":"import Axios from \"axios\";\nimport { localStorageKeys, netWorkCallMethods } from \"../utils\";\nexport const networkCall = (url, method, body, headers, isAuthorized = false) => {\n  //Check for URL,method,body\n  if (!url && !method) {\n    return Promise.reject({\n      message: \"URL and HTTP Method is not mentioned.\"\n    });\n  } //Check for proper URL\n\n\n  if (url) {\n    const expression = /(https?:\\/\\/(?:www\\.|(?!www))[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\\.[^\\s]{2,}|www\\.[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\\.[^\\s]{2,}|https?:\\/\\/(?:www\\.|(?!www))[a-zA-Z0-9]+\\.[^\\s]{2,}|www\\.[a-zA-Z0-9]+\\.[^\\s]{2,})/gi;\n    const regex = new RegExp(expression);\n\n    if (!url.match(regex)) {\n      return Promise.reject({\n        message: \"Malformed URL, Please check\"\n      });\n    }\n  } //Check for body of the POST method\n\n\n  if (method && method === netWorkCallMethods.post && !body) {\n    return Promise.reject({\n      message: \"POST method must contain Request Body.\"\n    });\n  } //Checking the Internet connection\n\n\n  if (!navigator.onLine) {\n    return Promise.reject({\n      message: \"Unable to connect with Internet!\"\n    });\n  } //Initializing the header\n\n\n  let newHeader = headers; //Adding Authorization to headers if it is requested\n\n  if (isAuthorized) {\n    newHeader = { ...headers,\n      Authorization: localStorageKeys.auth_token\n    };\n  }\n\n  return Axios({\n    method: method,\n    url: url,\n    data: body,\n    headers: newHeader\n  });\n};","map":{"version":3,"sources":["C:/office work/FIS/FIS New/CardHolderUI/src/networkcall/index.js"],"names":["Axios","localStorageKeys","netWorkCallMethods","networkCall","url","method","body","headers","isAuthorized","Promise","reject","message","expression","regex","RegExp","match","post","navigator","onLine","newHeader","Authorization","auth_token","data"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,gBAAT,EAA2BC,kBAA3B,QAAqD,UAArD;AAEA,OAAO,MAAMC,WAAW,GAAG,CAACC,GAAD,EAAMC,MAAN,EAAcC,IAAd,EAAoBC,OAApB,EAA4BC,YAAY,GAAC,KAAzC,KAAmD;AAE1E;AACA,MAAG,CAACJ,GAAD,IAAQ,CAACC,MAAZ,EAAmB;AACf,WAAOI,OAAO,CAACC,MAAR,CAAe;AAACC,MAAAA,OAAO,EAAC;AAAT,KAAf,CAAP;AACH,GALyE,CAO1E;;;AACA,MAAGP,GAAH,EAAO;AACH,UAAMQ,UAAU,GAAG,qNAAnB;AACA,UAAMC,KAAK,GAAG,IAAIC,MAAJ,CAAWF,UAAX,CAAd;;AAEA,QAAG,CAACR,GAAG,CAACW,KAAJ,CAAUF,KAAV,CAAJ,EAAqB;AACjB,aAAOJ,OAAO,CAACC,MAAR,CAAe;AAACC,QAAAA,OAAO,EAAC;AAAT,OAAf,CAAP;AACH;AACJ,GAfyE,CAiB1E;;;AACA,MAAGN,MAAM,IAAIA,MAAM,KAAKH,kBAAkB,CAACc,IAAxC,IAAgD,CAACV,IAApD,EAAyD;AACrD,WAAOG,OAAO,CAACC,MAAR,CAAe;AAACC,MAAAA,OAAO,EAAC;AAAT,KAAf,CAAP;AACH,GApByE,CAsB1E;;;AACA,MAAG,CAACM,SAAS,CAACC,MAAd,EAAqB;AACjB,WAAOT,OAAO,CAACC,MAAR,CAAe;AAACC,MAAAA,OAAO,EAAC;AAAT,KAAf,CAAP;AACH,GAzByE,CA2B1E;;;AACA,MAAIQ,SAAS,GAAGZ,OAAhB,CA5B0E,CA8B1E;;AACA,MAAGC,YAAH,EAAgB;AACZW,IAAAA,SAAS,GAAG,EACR,GAAGZ,OADK;AAERa,MAAAA,aAAa,EAAEnB,gBAAgB,CAACoB;AAFxB,KAAZ;AAIH;;AAED,SAAOrB,KAAK,CAAC;AACTK,IAAAA,MAAM,EAAEA,MADC;AAETD,IAAAA,GAAG,EAAEA,GAFI;AAGTkB,IAAAA,IAAI,EAAEhB,IAHG;AAITC,IAAAA,OAAO,EAAEY;AAJA,GAAD,CAAZ;AAMH,CA5CM","sourcesContent":["import Axios from \"axios\"\r\nimport { localStorageKeys, netWorkCallMethods } from \"../utils\";\r\n\r\nexport const networkCall = (url, method, body, headers,isAuthorized=false) => {\r\n\r\n    //Check for URL,method,body\r\n    if(!url && !method){\r\n        return Promise.reject({message:\"URL and HTTP Method is not mentioned.\"})\r\n    }\r\n\r\n    //Check for proper URL\r\n    if(url){\r\n        const expression = /(https?:\\/\\/(?:www\\.|(?!www))[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\\.[^\\s]{2,}|www\\.[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\\.[^\\s]{2,}|https?:\\/\\/(?:www\\.|(?!www))[a-zA-Z0-9]+\\.[^\\s]{2,}|www\\.[a-zA-Z0-9]+\\.[^\\s]{2,})/gi;\r\n        const regex = new RegExp(expression);\r\n\r\n        if(!url.match(regex)){\r\n            return Promise.reject({message:\"Malformed URL, Please check\"})\r\n        }\r\n    }\r\n\r\n    //Check for body of the POST method\r\n    if(method && method === netWorkCallMethods.post && !body){\r\n        return Promise.reject({message:\"POST method must contain Request Body.\"})\r\n    }\r\n\r\n    //Checking the Internet connection\r\n    if(!navigator.onLine){\r\n        return Promise.reject({message:\"Unable to connect with Internet!\"});\r\n    }\r\n\r\n    //Initializing the header\r\n    let newHeader = headers;\r\n\r\n    //Adding Authorization to headers if it is requested\r\n    if(isAuthorized){\r\n        newHeader = {\r\n            ...headers,\r\n            Authorization: localStorageKeys.auth_token\r\n        }\r\n    }\r\n\r\n    return Axios({\r\n        method: method,\r\n        url: url,\r\n        data: body,\r\n        headers: newHeader\r\n    });\r\n}"]},"metadata":{},"sourceType":"module"}