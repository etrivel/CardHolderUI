{"ast":null,"code":"var _jsxFileName = \"C:\\\\Projects_Crayond\\\\CardHolderUI\\\\src\\\\App.auth.js\";\nimport React from \"react\";\nimport { AuthContext } from \"./contexts\";\nimport config from \"./config\";\nimport { networkCall } from \"./networkcall\";\nimport { netWorkCallMethods, localStorageKeys } from \"./utils\";\n\nclass AppAuth extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      user: {},\n      isRefreshed: false\n    };\n  }\n\n  componentDidMount() {\n    this.refreshAPI();\n  }\n\n  refreshAPI() {\n    if (localStorage.getItem(localStorageKeys.auth_token)) {\n      networkCall(`${config.api_url}/auth/refresh`, //Your refresh API End Point\n      netWorkCallMethods.get, //Mention your HTTP Method (GET,POST,PUT,UPDATE,DELETE) using the\n      //until variable networkCallMethod\n      null, //Request Body If any\n      null, //Addition Header If any\n      true //If true it adds Authorization key to the existing header with token from localstorage\n      ).then(res => {\n        let token = \"token\"; //TODO: Save your token to the token variable\n\n        token = res.data.auth_token; //TODO: Save the token to the localstorage if you want the user\n\n        localStorage.setItem(localStorageKeys.auth_token, token);\n        this.setState({\n          // TODO: Save the user detail here\n          user: res.data.user,\n          isRefreshed: true\n        });\n      }).catch(res => {\n        //Authorized token removing the current token from local storage.\n        localStorage.removeItem(localStorageKeys.auth_token);\n        this.setState({\n          isRefreshed: true\n        });\n      });\n    } else {\n      this.setState({\n        isRefreshed: true\n      });\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, this.state.isRefreshed ? /*#__PURE__*/React.createElement(AuthContext.Provider, {\n      value: {\n        user: this.state.user,\n        setAuth: this.setState\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }\n    }, this.props.children) : /*#__PURE__*/React.createElement(React.Fragment, null, \"Your Loader Here...\"));\n  }\n\n}\n\nexport default AppAuth;","map":{"version":3,"sources":["C:/Projects_Crayond/CardHolderUI/src/App.auth.js"],"names":["React","AuthContext","config","networkCall","netWorkCallMethods","localStorageKeys","AppAuth","Component","constructor","props","state","user","isRefreshed","componentDidMount","refreshAPI","localStorage","getItem","auth_token","api_url","get","then","res","token","data","setItem","setState","catch","removeItem","render","setAuth","children"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,QAA4B,YAA5B;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,SAASC,WAAT,QAA4B,eAA5B;AACA,SAASC,kBAAT,EAA6BC,gBAA7B,QAAqD,SAArD;;AAEA,MAAMC,OAAN,SAAsBN,KAAK,CAACO,SAA5B,CAAsC;AACpCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,IAAI,EAAE,EADK;AAEXC,MAAAA,WAAW,EAAE;AAFF,KAAb;AAID;;AACDC,EAAAA,iBAAiB,GAAG;AAClB,SAAKC,UAAL;AACD;;AAEDA,EAAAA,UAAU,GAAG;AACX,QAAIC,YAAY,CAACC,OAAb,CAAqBX,gBAAgB,CAACY,UAAtC,CAAJ,EAAuD;AACrDd,MAAAA,WAAW,CACR,GAAED,MAAM,CAACgB,OAAQ,eADT,EACyB;AAElCd,MAAAA,kBAAkB,CAACe,GAHV,EAGe;AACxB;AAEA,UANS,EAMH;AAEN,UARS,EAQH;AAEN,UAVS,CAUJ;AAVI,OAAX,CAYGC,IAZH,CAYSC,GAAD,IAAS;AACb,YAAIC,KAAK,GAAG,OAAZ,CADa,CAGb;;AACAA,QAAAA,KAAK,GAAGD,GAAG,CAACE,IAAJ,CAASN,UAAjB,CAJa,CAMb;;AACAF,QAAAA,YAAY,CAACS,OAAb,CAAqBnB,gBAAgB,CAACY,UAAtC,EAAkDK,KAAlD;AAEA,aAAKG,QAAL,CAAc;AACZ;AACAd,UAAAA,IAAI,EAAEU,GAAG,CAACE,IAAJ,CAASZ,IAFH;AAGZC,UAAAA,WAAW,EAAE;AAHD,SAAd;AAKD,OA1BH,EA2BGc,KA3BH,CA2BUL,GAAD,IAAS;AACd;AACAN,QAAAA,YAAY,CAACY,UAAb,CAAwBtB,gBAAgB,CAACY,UAAzC;AACA,aAAKQ,QAAL,CAAc;AACZb,UAAAA,WAAW,EAAE;AADD,SAAd;AAGD,OAjCH;AAkCD,KAnCD,MAmCO;AACL,WAAKa,QAAL,CAAc;AACZb,QAAAA,WAAW,EAAE;AADD,OAAd;AAGD;AACF;;AAEDgB,EAAAA,MAAM,GAAG;AACP,wBACE,0CACG,KAAKlB,KAAL,CAAWE,WAAX,gBACC,oBAAC,WAAD,CAAa,QAAb;AACE,MAAA,KAAK,EAAE;AAAED,QAAAA,IAAI,EAAE,KAAKD,KAAL,CAAWC,IAAnB;AAAyBkB,QAAAA,OAAO,EAAE,KAAKJ;AAAvC,OADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAGG,KAAKhB,KAAL,CAAWqB,QAHd,CADD,gBAOC,gEARJ,CADF;AAaD;;AArEmC;;AAwEtC,eAAexB,OAAf","sourcesContent":["import React from \"react\";\r\nimport { AuthContext } from \"./contexts\";\r\nimport config from \"./config\";\r\nimport { networkCall } from \"./networkcall\";\r\nimport { netWorkCallMethods, localStorageKeys } from \"./utils\";\r\n\r\nclass AppAuth extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      user: {},\r\n      isRefreshed: false,\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    this.refreshAPI();\r\n  }\r\n\r\n  refreshAPI() {\r\n    if (localStorage.getItem(localStorageKeys.auth_token)) {\r\n      networkCall(\r\n        `${config.api_url}/auth/refresh`, //Your refresh API End Point\r\n\r\n        netWorkCallMethods.get, //Mention your HTTP Method (GET,POST,PUT,UPDATE,DELETE) using the\r\n        //until variable networkCallMethod\r\n\r\n        null, //Request Body If any\r\n\r\n        null, //Addition Header If any\r\n\r\n        true //If true it adds Authorization key to the existing header with token from localstorage\r\n      )\r\n        .then((res) => {\r\n          let token = \"token\";\r\n\r\n          //TODO: Save your token to the token variable\r\n          token = res.data.auth_token;\r\n\r\n          //TODO: Save the token to the localstorage if you want the user\r\n          localStorage.setItem(localStorageKeys.auth_token, token);\r\n\r\n          this.setState({\r\n            // TODO: Save the user detail here\r\n            user: res.data.user,\r\n            isRefreshed: true,\r\n          });\r\n        })\r\n        .catch((res) => {\r\n          //Authorized token removing the current token from local storage.\r\n          localStorage.removeItem(localStorageKeys.auth_token);\r\n          this.setState({\r\n            isRefreshed: true,\r\n          });\r\n        });\r\n    } else {\r\n      this.setState({\r\n        isRefreshed: true,\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        {this.state.isRefreshed ? (\r\n          <AuthContext.Provider\r\n            value={{ user: this.state.user, setAuth: this.setState }}\r\n          >\r\n            {this.props.children}\r\n          </AuthContext.Provider>\r\n        ) : (\r\n          <>Your Loader Here...</>\r\n        )}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AppAuth;\r\n"]},"metadata":{},"sourceType":"module"}